# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
import datetime
import json
import random

import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import Application, filters, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, \
    ConversationHandler

from data import db_session
from data.category import Category
from data.users import User
from data.words import Word, OwnWord
from reword_token import TOKEN

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CHOICE, TYPING_REPLY, REMEMBER, CALLBACK, RECEIVE_IMAGE = range(5)

INTERVALS = {0: 0,
             1: 20 * 60,  # 20 minutes
             2: 60 * 60,  # 1 hour
             3: 6 * 60 * 60,  # 6 hours
             4: 24 * 60 * 60,  # 1 day
             5: 7 * 24 * 60 * 60,  # 1 week
             6: 3 * 7 * 24 * 60 * 60  # 3 weeks
             }

TIME_STORAGE_FORMAT = '%Y-%m-%dT%H:%M:%S.%f'


def add_user_if_not_added(user_name, chat_id):
    '''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç—É'''
    db_sess = db_session.create_session()
    if not db_sess.query(User).filter(User.chat_id == chat_id).first():
        new_user = User()
        new_user.name = user_name
        new_user.chat_id = chat_id
        db_sess.add(new_user)
        db_sess.commit()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞'''
    add_user_if_not_added(update.message.from_user['first_name'], update.effective_chat.id)
    await update.message.reply_photo('static/img/reword_logo.png',
                                     caption=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ reword, {update.message.from_user["first_name"]}!')
    await menu(update, context)


def make_reply_markup(markup_id, **kwargs) -> ReplyKeyboardMarkup:
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ReplyKeyboardMarkup'''
    if markup_id == 1:  # menu markup
        reply_keyboard = [['–£—á–∏—Ç—å üéì'], ['–°–ª–æ–≤–∞—Ä—å üìö'], ['–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ üí¨']]
        return ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                   input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é")
    elif markup_id == 2:  # learn section markup
        reply_keyboard = [[f'–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üìùÔ∏è({kwargs["category_text"]})'],
                          ['–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ üÜï', '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞ üîÅ'],
                          ['–í–µ—Ä–Ω—É—Ç—å—Å—è üîô']]
        return ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é')
    elif markup_id == 3:  # learn words markup
        reply_keyboard = [['–Ø —É–∂–µ –∑–Ω–∞—é —ç—Ç–æ —Å–ª–æ–≤–æ', '–ù–∞—á–∞—Ç—å —É—á–∏—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ'],
                          ['–ó–∞–∫–æ–Ω—á–∏—Ç—å']]
        return ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                   input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —Å–ª–æ–≤–æ–º')
    elif markup_id == 4:  # repeat words markup
        reply_keyboard = [['–ù–∞–ø–∏—Å–∞—Ç—å ‚úèÔ∏è', '–í—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üî¢'], ['–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üëÄ'], ['–ó–∞–∫–æ–Ω—á–∏—Ç—å']]
        return ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                   input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —Å–ª–æ–≤–æ–º')
    elif markup_id == 5:  # remember markup
        reply_keyboard = [['–Ø –≤—Å–ø–æ–º–Ω–∏–ª —ç—Ç–æ —Å–ª–æ–≤–æ', '–Ø –Ω–µ –≤—Å–ø–æ–º–Ω–∏–ª —ç—Ç–æ —Å–ª–æ–≤–æ']]
        return ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                   input_field_placeholder='–í—Å–ø–æ–º–Ω–∏–ª–∏ –ª–∏ –≤—ã —ç—Ç–æ —Å–ª–æ–≤–æ?')
    elif markup_id == 6:  # dictionary section markup
        reply_keyboard = [['–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üìÑ'], ['–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–ª–æ–≤–æ ‚ûï'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è üîô']]
        return ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é')
    elif markup_id == 7:  # add word markup
        reply_keyboard = [['–°–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º', '–ü–µ—Ä–µ–≤–æ–¥'], ['–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É-–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é üñº'],
                          ['–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ üíæ', '–û—Ç–º–µ–Ω–∞ ‚ùå']]
        return ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                   input_field_placeholder='–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ')
    elif markup_id == 8:  # translater markup
        phase = kwargs['phase']
        phases = {0: 'üá∑üá∫ -> üá¨üáß', 1: 'üá¨üáß -> üá∑üá∫'}
        reply_keyboard = [['–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üìù'], [f'–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üîÑ(C–µ–π—á–∞—Å {phases[phase]})'],
                          ['–í–µ—Ä–Ω—É—Ç—å—Å—è üîô']]
        return ReplyKeyboardMarkup(reply_keyboard)


def make_inline_markup(markup_id, **kwargs) -> InlineKeyboardMarkup:
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboardMarkup'''
    if markup_id == 1:  # change categories markup
        chat_id = kwargs['chat_id']
        db_sess = db_session.create_session()
        user = db_sess.query(User).filter(User.chat_id == chat_id).first()
        all_categories = sorted(list(db_sess.query(Category)), key=lambda x: x.name)
        inline_keyboard = []
        for category in all_categories:
            symbol = '‚úÖ' if category in list(user.categories_studied) else '‚òëÔ∏è'
            button_text = symbol + ' ' + category.name
            inline_keyboard.append(
                [InlineKeyboardButton(button_text, callback_data=f'change_categories {category.id}')])
        if user.own_words_studied:
            inline_keyboard.insert(0,
                                   [InlineKeyboardButton('‚úÖ –ú–æ–∏ —Å–ª–æ–≤–∞ üìñ', callback_data='change_categories OwnWords')])
        else:
            inline_keyboard.insert(0,
                                   [InlineKeyboardButton('‚òëÔ∏è –ú–æ–∏ —Å–ª–æ–≤–∞ üìñ',
                                                         callback_data='change_categories OwnWords')])
        inline_keyboard.append([InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úîÔ∏è', callback_data='change_categories OK')])
        return InlineKeyboardMarkup(inline_keyboard)
    elif markup_id == 2:  # repeat quiz markup
        main_word = kwargs['main_word']
        db_sess = db_session.create_session()
        if type(main_word) is Word:
            options = random.sample(list(db_sess.query(Word).filter(Word.id != main_word.id)), k=3)
        else:
            options = random.sample(list(db_sess.query(Word).all()), k=3)
        main_word_correct_id = random.randint(0, 3)
        options.insert(main_word_correct_id, main_word)
        inline_keyboard = []
        for i in range(2):
            row = []
            for j in range(2):
                if 2 * i + j == main_word_correct_id:
                    row.append(InlineKeyboardButton(main_word.word, callback_data='repeat_quiz CORRECT'))
                else:
                    row.append(InlineKeyboardButton(options[2 * i + j].word,
                                                    callback_data=f'repeat_quiz {options[2 * i + j].word} WRONG'))
            inline_keyboard.append(row)
        return InlineKeyboardMarkup(inline_keyboard)
    elif markup_id == 3:
        db_sess = db_session.create_session()
        inline_keyboard = []
        all_categories = sorted(db_sess.query(Category).all(), key=lambda category: category.name)
        if len(all_categories) % 2:
            inline_keyboard.append([InlineKeyboardButton('–ú–æ–∏ —Å–ª–æ–≤–∞ üìñ', callback_data='open_category OwnWords'),
                                    InlineKeyboardButton(all_categories[0].name,
                                                         callback_data=f'open_category {all_categories[0].id}')])
            for i in range(len(all_categories) // 2):
                row = []
                for j in range(1, 3):
                    row.append(InlineKeyboardButton(all_categories[2 * i + j].name,
                                                    callback_data=f'open_category {all_categories[2 * i + j].id}'))
                inline_keyboard.append(row)
        else:
            inline_keyboard.append([InlineKeyboardButton('–ú–æ–∏ —Å–ª–æ–≤–∞ üìñ', callback_data='open_category OwnWords')])
            for i in range(len(all_categories) // 2):
                row = []
                for j in range(2):
                    row.append(InlineKeyboardButton(all_categories[2 * i + j].name,
                                                    callback_data=f'open_category {all_categories[2 * i + j].id}'))
                inline_keyboard.append(row)
        inline_keyboard.append([InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è üîô', callback_data='back_to_dictionary_section')])
        return InlineKeyboardMarkup(inline_keyboard)
    elif markup_id == 4:
        inline_keyboard = [[InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è üîô', callback_data='back_to_categories_section')]]
        return InlineKeyboardMarkup(inline_keyboard)


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu'''
    await context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é',
                                   reply_markup=make_reply_markup(1))


async def learn_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤'''
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.chat_id == update.effective_chat.id).first()
    categoties_count = len(user.categories_studied)
    categoties_count += 1 if user.own_words_studied else 0
    categories_texts = {0: '–í—ã–±—Ä–∞–Ω–æ xxx –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                        1: '–í—ã–±—Ä–∞–Ω–∞ xxx –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                        2: '–í—ã–±—Ä–∞–Ω–æ xxx –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                        3: '–í—ã–±—Ä–∞–Ω–æ xxx –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                        4: '–í—ã–±—Ä–∞–Ω–æ xxx –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                        5: '–í—ã–±—Ä–∞–Ω–æ xxx –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                        6: '–í—ã–±—Ä–∞–Ω–æ xxx –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                        7: '–í—ã–±—Ä–∞–Ω–æ xxx –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                        8: '–í—ã–±—Ä–∞–Ω–æ xxx –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                        9: '–í—ã–±—Ä–∞–Ω–æ xxx –∫–∞—Ç–µ–≥–æ—Ä–∏–π'}
    if categoties_count in range(11, 20):
        category_text = categories_texts[0].replace('xxx', str(categoties_count))
    else:
        category_text = categories_texts[categoties_count % 10].replace('xxx', str(categoties_count))
    await context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
                                   reply_markup=make_reply_markup(2, category_text=category_text))


async def cc_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):  # change categories callback handler
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑—É—á–∞–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π'''
    query = update.callback_query
    if query.data.split()[1] == 'OK':
        await query.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
        await query.delete_message()
        await learn_section(update, context)
    else:
        db_sess = db_session.create_session()
        user = db_sess.query(User).filter(User.chat_id == update.effective_chat.id).first()
        if query.data.split()[1] == 'OwnWords':
            if user.own_words_studied:
                user.own_words_studied = False
                await query.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ú–æ–∏ —Å–ª–æ–≤–∞ üìñ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
            else:
                user.own_words_studied = True
                await query.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ú–æ–∏ —Å–ª–æ–≤–∞ üìñ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        else:
            category_id = int(query.data.split()[1])
            category = db_sess.query(Category).filter(Category.id == category_id).first()
            if category in user.categories_studied:
                user.categories_studied.remove(category)
                await query.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category.name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
            else:
                user.categories_studied.append(category)
                await query.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category.name} –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        db_sess.commit()
        await query.edit_message_reply_markup(make_inline_markup(1, chat_id=update.effective_chat.id))


async def change_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑—É—á–∞–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π'''
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                                    reply_markup=make_inline_markup(1, chat_id=update.effective_chat.id))


async def learn_new_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤'''
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.chat_id == update.effective_chat.id).first()
    if not user.categories_studied and not user.categories_studied:
        await update.message.reply_text('<b>–£ —Ç–µ–±—è –≤—ã–±—Ä–∞–Ω–æ 0 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ü´¢</b>', parse_mode=ParseMode.HTML)
        await change_categories(update, context)
        return ConversationHandler.END
    else:
        if await new_word(update, context) == CHOICE:
            return CHOICE
        await update.message.reply_text('<b>–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ü´¢</b>',
                                        parse_mode=ParseMode.HTML)
        await learn_section(update, context)
        return ConversationHandler.END


async def new_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è'''
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.chat_id == update.effective_chat.id).first()
    words_for_studying = []
    for category in user.categories_studied:
        for word in category.words:
            if str(update.effective_chat.id) not in json.loads(word.progress):
                words_for_studying.append(word)
    if user.own_words_studied:
        words_for_studying.extend([word for word in user.own_words if json.loads(word.progress) == [None, None]])
    if words_for_studying:
        word = random.choice(words_for_studying)
        context.user_data['last_word_data'] = (word.id, type(word))
        text = f'–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ:\n<b>{word.word}</b> - <b>{word.translation}</b>'
        if type(word) is Word and json.loads(word.examples):
            text += '\n\n–ü—Ä–∏–º–µ—Ä—ã:'
            for en_ex, ru_ex in json.loads(word.examples):
                text += f'\n-<b>{en_ex}</b>\n {ru_ex}'
        if word.image:
            await update.message.reply_photo(word.image, caption=text, reply_markup=make_reply_markup(3),
                                             parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text(text, reply_markup=make_reply_markup(3), parse_mode=ParseMode.HTML)
        return CHOICE
    return ConversationHandler.END


async def already_known(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–Ω–∞–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–æ, —Ç–æ –æ–Ω–æ –Ω–µ –ø–æ–ø–∞–¥—ë—Ç—Å—è –µ–º—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏'''
    word_id, word_type = context.user_data['last_word_data']
    db_sess = db_session.create_session()
    if word_type is OwnWord:
        word = db_sess.query(OwnWord).filter(OwnWord.id == word_id).first()
        word.progress = [-1, None]
    else:
        word = db_sess.query(Word).filter(Word.id == word_id).first()
        progress = json.loads(word.progress)
        progress[str(update.effective_chat.id)] = [-1, None]
        word.progress = json.dumps(progress)
    db_sess.commit()
    if await new_word(update, context) == CHOICE:
        return CHOICE
    await update.message.reply_text('<b>–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ü´¢</b>',
                                    parse_mode=ParseMode.HTML)
    await learn_section(update, context)
    return ConversationHandler.END


async def start_learn_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–Ω–∞–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–æ, –æ–Ω–æ –ø–æ–ø–∞–¥—ë—Ç—Å—è –µ–º—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏'''
    word_id, word_type = context.user_data['last_word_data']
    db_sess = db_session.create_session()
    if word_type is OwnWord:
        word = db_sess.query(OwnWord).filter(OwnWord.id == word_id).first()
        start_time = datetime.datetime.now().strftime(TIME_STORAGE_FORMAT)  # –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –∏–∑—É—á–∞–µ–º—ã–µ
        word.progress = json.dumps([0, start_time])
    else:
        word = db_sess.query(Word).filter(Word.id == word_id).first()
        progress = json.loads(word.progress)
        start_time = datetime.datetime.now().strftime(TIME_STORAGE_FORMAT)  # –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –∏–∑—É—á–∞–µ–º—ã–µ
        progress[str(update.effective_chat.id)] = [0, start_time]
        word.progress = json.dumps(progress)
    db_sess.commit()
    if await new_word(update, context) == CHOICE:
        return CHOICE
    await update.message.reply_text('<b>–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ü´¢</b>',
                                    parse_mode=ParseMode.HTML)
    await learn_section(update, context)
    return ConversationHandler.END


async def stop_learning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–í—ã—Ö–æ–¥ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤'''
    if 'last_word_data' in context.user_data:
        del context.user_data['last_word_data']
    await update.message.reply_text('–ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞!', reply_markup=ReplyKeyboardRemove())
    await learn_section(update, context)
    return ConversationHandler.END


def get_words_for_repeating(chat_id) -> list:
    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'''
    db_sess = db_session.create_session()
    words_for_repeating = []
    for word in db_sess.query(Word).all():
        progress_data = json.loads(word.progress).get(str(chat_id), [None, None])
        if progress_data[0] not in range(7):
            continue
        last_repeat = datetime.datetime.strptime(progress_data[1], TIME_STORAGE_FORMAT)
        delta = datetime.timedelta(seconds=INTERVALS[progress_data[0]])
        if last_repeat + delta <= datetime.datetime.now():
            words_for_repeating.append(word)
    user = db_sess.query(User).filter(User.chat_id == chat_id).first()
    for word in user.own_words:
        progress_data = json.loads(word.progress)
        if progress_data[0] not in range(7):
            continue
        last_repeat = datetime.datetime.strptime(progress_data[1], TIME_STORAGE_FORMAT)
        delta = datetime.timedelta(seconds=INTERVALS[progress_data[0]])
        if last_repeat + delta <= datetime.datetime.now():
            words_for_repeating.append(word)
    return words_for_repeating


async def do_you_remember(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–§—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è—é—â–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤—Å–ø–æ–º–Ω–∏–ª'''
    if update.message.text == '–Ø –≤—Å–ø–æ–º–Ω–∏–ª —ç—Ç–æ —Å–ª–æ–≤–æ':
        word_id, word_type = context.user_data['last_word_data']
        db_sess = db_session.create_session()
        if word_type is OwnWord:
            word = db_sess.query(OwnWord).filter(OwnWord.id == word_id).first()
            progress_value, last_repeat = json.loads(word.progress)
            progress_value += 1
            last_repeat = datetime.datetime.now().strftime(TIME_STORAGE_FORMAT)
            word.progress = json.dumps([progress_value, last_repeat])
            db_sess.commit()
        else:
            word = db_sess.query(Word).filter(Word.id == word_id).first()
            progress = json.loads(word.progress)
            progress_value, last_repeat = progress[str(update.effective_chat.id)]
            progress_value += 1
            last_repeat = datetime.datetime.now().strftime(TIME_STORAGE_FORMAT)
            progress[str(update.effective_chat.id)] = [progress_value, last_repeat]
            word.progress = json.dumps(progress)
            db_sess.commit()
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—Å–ø–æ–º–Ω–∏–ª —Å–ª–æ–≤–æ, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏
        pass
    if await word_for_repeat(update, context) == CHOICE:
        return CHOICE
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text='<b>–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ü´¢</b>',
                                   parse_mode=ParseMode.HTML)
    await learn_section(update, context)
    return ConversationHandler.END


async def word_for_repeat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–°–ª–æ–≤–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'''
    words_for_repeating = get_words_for_repeating(update.effective_chat.id)
    if words_for_repeating:
        word = random.choice(words_for_repeating)
        context.user_data['last_word_data'] = (word.id, type(word))
        text = f'–°–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º: <b>{word.translation}</b>'
        if word.image:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=word.image, caption=text,
                                         reply_markup=make_reply_markup(4), parse_mode=ParseMode.HTML)
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                                           reply_markup=make_reply_markup(4), parse_mode=ParseMode.HTML)
        return CHOICE
    else:
        return ConversationHandler.END


async def repeat_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤'''
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.chat_id == update.effective_chat.id).first()
    if not get_words_for_repeating(user.chat_id):
        await update.message.reply_text('<b>–£ —Ç–µ–±—è –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ü´¢</b>',
                                        parse_mode=ParseMode.HTML)
        await learn_section(update, context)
        return ConversationHandler.END
    else:
        return await word_for_repeat(update, context)


async def enter_translation_during_repeating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–µ—Ä–µ–≤–æ–¥–∞'''
    user_en_translation = update.message.text
    db_sess = db_session.create_session()
    word_id, word_type = context.user_data['last_word_data']
    if word_type is OwnWord:
        word = db_sess.query(OwnWord).filter(OwnWord.id == word_id).first()
        if ' '.join(' '.join(word.word.split()).split('-')).removeprefix('to ') == ' '.join(
                ' '.join(user_en_translation.split()).split('-')).removeprefix('to '):
            await update.message.reply_text(f'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!', reply_markup=make_reply_markup(5))
        else:
            await update.message.reply_text(f'‚ùå –£–ø—Å..\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {word.word}',
                                            reply_markup=make_reply_markup(5))
    else:
        word = db_sess.query(Word).filter(Word.id == word_id).first()
        if ' '.join(' '.join(word.word.split()).split('-')).removeprefix('to ') == ' '.join(
                ' '.join(user_en_translation.split()).split('-')).removeprefix('to '):
            await update.message.reply_text(f'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!', reply_markup=make_reply_markup(5))
        else:
            await update.message.reply_text(f'‚ùå –£–ø—Å..\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {word.word}',
                                            reply_markup=make_reply_markup(5))
    return REMEMBER


async def choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–æ—Å–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞'''
    if update.message.text == '–ù–∞–ø–∏—Å–∞—Ç—å ‚úèÔ∏è':
        await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:')
        return TYPING_REPLY
    elif update.message.text == '–í—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üî¢':
        db_sess = db_session.create_session()
        main_word_id, main_word_type = context.user_data['last_word_data']
        if main_word_type is OwnWord:
            main_word = db_sess.query(OwnWord).filter(OwnWord.id == main_word_id).first()
        else:
            main_word = db_sess.query(Word).filter(Word.id == main_word_id).first()
        await update.message.reply_text('–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:',
                                        reply_markup=make_inline_markup(2, main_word=main_word))
        return CALLBACK
    elif update.message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üëÄ':
        db_sess = db_session.create_session()
        word_id, word_type = context.user_data['last_word_data']
        if word_type is OwnWord:
            word = db_sess.query(OwnWord).filter(OwnWord.id == word_id).first()
        else:
            word = db_sess.query(Word).filter(Word.id == word_id).first()
        text = f'–°–ª–æ–≤–æ:\n<b>{word.word}</b> - <b>{word.translation}</b>'
        if word_type is Word and json.loads(word.examples):
            text += '\n\n–ü—Ä–∏–º–µ—Ä—ã:'
            for en_ex, ru_ex in json.loads(word.examples):
                text += f'\n-<b>{en_ex}</b>\n {ru_ex}'
        await update.message.reply_text(text, reply_markup=make_reply_markup(5), parse_mode=ParseMode.HTML)
        return REMEMBER


async def repeat_quiz_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–ø–æ—Å–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞'''
    query = update.callback_query
    if query.data.split()[-1] == 'CORRECT':
        await query.answer('‚úÖ')
        await context.bot.send_message(chat_id=update.effective_chat.id, text='‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!',
                                       reply_markup=make_reply_markup(5))
    else:
        db_sess = db_session.create_session()
        word_id, word_type = context.user_data['last_word_data']
        if word_type is OwnWord:
            word = db_sess.query(OwnWord).filter(OwnWord.id == word_id).first()
        else:
            word = db_sess.query(Word).filter(Word.id == word_id).first()
        await query.answer('‚ùå')
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f'‚ùå –£–ø—Å..\n–¢–≤–æ–π –≤—ã–±–æ—Ä: {query.data.split()[1]}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {word.word}',
                                       reply_markup=make_reply_markup(5))
    await query.delete_message()
    return REMEMBER


async def stop_repeating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–í—ã—Ö–æ–¥ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤'''
    if 'last_word_data' in context.user_data:
        del context.user_data['last_word_data']
    await update.message.reply_text('–ù–µ –∑–∞–±—É–¥—å —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!', reply_markup=ReplyKeyboardRemove())
    await learn_section(update, context)
    return ConversationHandler.END


async def dictionary_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤(—Å–ª–æ–≤–∞—Ä–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏)'''
    await context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
                                   reply_markup=make_reply_markup(6, chat_id=update.effective_chat.id))


async def categories_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π'''
    await update.message.reply_text('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞ –≤ –Ω–µ–π:',
                                    reply_markup=make_inline_markup(3, chat_id=update.effective_chat.id))
    return CALLBACK


async def open_category_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–∫—ã—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤'''
    query = update.callback_query
    await query.answer()
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.chat_id == update.effective_chat.id).first()
    if query.data.split()[-1] == 'OwnWords':
        text = '–°–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–æ–∏ —Å–ª–æ–≤–∞ üìñ:'
        for word in user.own_words:
            text += f'\n<b>{word.word}</b> - <b>{word.translation}</b>'
        if not user.own_words:
            text += '\n–¢—É—Ç –ø—É—Å—Ç–æ üï∏'
        max_len = len(max(text.split('\n'), key=lambda string: len(string)))
        text = ('\n' + min(int(max_len // 2), 28) * '‚Äî' + '\n').join(text.split('\n'))
        await query.edit_message_text(text, reply_markup=make_inline_markup(4), parse_mode=ParseMode.HTML)
    else:
        category_id = int(query.data.split()[-1])
        category = db_sess.query(Category).filter(Category.id == category_id).first()
        text = f'–°–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name}:'
        for i in range(len(category.words)):
            text += '($#$)'  # ($#$) - –º–µ—Ç–∫–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            word = category.words[i]
            text += f'<b>{word.word}</b> - <b>{word.translation}</b>'
            if json.loads(word.examples):
                text += '\n–ü—Ä–∏–º–µ—Ä—ã:'
                for en_ex, ru_ex in json.loads(word.examples):
                    text += f'\n-<b>{en_ex}</b>\n {ru_ex}'
        if not category.words:
            text += '($#$)–¢—É—Ç –ø—É—Å—Ç–æ üï∏'
        max_len = len(max(text.split('($#$)'), key=lambda string: len(string)))
        text = ('\n' + min(int(max_len // 2), 28) * '‚Äî' + '\n').join(text.split('($#$)'))
        await query.edit_message_text(text, reply_markup=make_inline_markup(4), parse_mode=ParseMode.HTML)


async def back_to_categories_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–í—ã—Ö–æ–¥ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'''
    query = update.callback_query
    await query.answer()
    await query.edit_message_text('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞ –≤ –Ω–µ–π:',
                                  reply_markup=make_inline_markup(3, chat_id=update.effective_chat.id))
    return CALLBACK


async def back_to_dictionary_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–í—ã—Ö–æ–¥ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Å–ª–æ–≤–∞—Ä–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏'''
    query = update.callback_query
    await query.answer()
    await query.delete_message()
    await dictionary_section(update, context)
    return ConversationHandler.END


async def add_word_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞'''
    await update.message.reply_text('–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ', reply_markup=make_reply_markup(7))
    return CHOICE


async def regular_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–æ—Å–æ–±–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏'''
    section = update.message.text
    if section == '–°–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º':
        context.user_data['info'] = 'EN'
        if context.user_data.get('EN', False):
            await update.message.reply_text(
                f'–†–∞–Ω–µ–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ: {context.user_data.get("EN")}\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º(–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å):',
                reply_markup=ReplyKeyboardRemove())
        else:
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º(–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å):',
                                            reply_markup=ReplyKeyboardRemove())
        return TYPING_REPLY
    elif section == '–ü–µ—Ä–µ–≤–æ–¥':
        context.user_data['info'] = 'RU'
        if context.user_data.get('RU', False):
            await update.message.reply_text(
                f'–†–∞–Ω–µ–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ: {context.user_data.get("RU")}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º(–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å):',
                reply_markup=ReplyKeyboardRemove())
        else:
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º(–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å):',
                                            reply_markup=ReplyKeyboardRemove())
        return TYPING_REPLY
    elif section == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É-–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é üñº':
        await update.message.reply_text(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É-–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é(–±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ —Å–ª–æ–≤–∞):',
            reply_markup=ReplyKeyboardRemove())
        return RECEIVE_IMAGE


async def receive_information(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∑–∞–ø–∏—Å—å –µ—ë –≤ —Å–ª–æ–≤–∞—Ä—å context.user_data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞'''
    context.user_data[context.user_data['info']] = update.message.text.lower().strip()
    await update.message.reply_text('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚úÖ')
    return await add_word_section(update, context)


async def receive_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ –≤ —Å–ª–æ–≤–∞—Ä—å context.user_data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞'''
    file_id = update.message.photo[-1].file_id
    new_file = await context.bot.get_file(file_id)
    context.user_data['image'] = new_file
    await update.message.reply_text('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚úÖ')
    return await add_word_section(update, context)


async def save_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞'''
    if not (context.user_data.get('RU', False) and context.user_data.get('EN', False)):
        await update.message.reply_text('<b>–ù–ï –ó–ê–ü–û–õ–ù–ï–ù–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï</b>', reply_markup=make_reply_markup(7),
                                        parse_mode=ParseMode.HTML)
        return CHOICE
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.chat_id == update.effective_chat.id).first()
    new_own_word = OwnWord()
    new_own_word.word = context.user_data['EN']
    new_own_word.translation = context.user_data['RU']
    new_own_word.user_id = user.id
    if context.user_data.get('image', False):
        filename = f'{update.effective_chat.id}_{datetime.datetime.now().strftime("%H%M%S%j%Y")}.jpg'
        path = f'static/users_img/{filename}'
        try:
            await context.user_data['image'].download_to_drive(path)
            new_own_word.image = path
            await update.message.reply_text('–°–ª–æ–≤–æ <b>—É—Å–ø–µ—à–Ω–æ</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ú–æ–∏ —Å–ª–æ–≤–∞ üìñ',
                                            parse_mode=ParseMode.HTML)
        except Exception:
            await update.message.reply_text(
                '::–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏\n::'
                '–°–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ <b>–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏</b> –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ú–æ–∏ —Å–ª–æ–≤–∞ üìñ',
                parse_mode=ParseMode.HTML)
    user.own_words.append(new_own_word)
    db_sess.add(new_own_word)
    db_sess.commit()
    await dictionary_section(update, context)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–í—ã—Ö–æ–¥ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'''
    context.user_data.pop('EN', 0)
    context.user_data.pop('RU', 0)
    context.user_data.pop('photo', 0)
    await dictionary_section(update, context)
    return ConversationHandler.END


async def translater_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º'''
    context.user_data['phase'] = 0
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=make_reply_markup(8, phase=0))
    return CHOICE


async def translate_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è'''
    section = update.message.text
    if section == '–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üìù':
        phase = context.user_data['phase']
        phases = {0: 'üá∑üá∫ -> üá¨üáß', 1: 'üá¨üáß -> üá∑üá∫'}
        await update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞({phases[phase]})',
                                        reply_markup=ReplyKeyboardRemove())
        return TYPING_REPLY
    elif '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üîÑ' in section:
        context.user_data['phase'] += 1
        context.user_data['phase'] %= 2
        phase = context.user_data['phase']
        phases = {0: 'üá∑üá∫ -> üá¨üáß', 1: 'üá¨üáß -> üá∑üá∫'}
        await update.message.reply_text(f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {phases[phase]}',
                                        reply_markup=make_reply_markup(8, phase=phase))
        return CHOICE


async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é API https://ftapi.pythonanywhere.com'''
    text = update.message.text
    if context.user_data['phase']:
        request = f'https://ftapi.pythonanywhere.com/translate?sl=en&dl=ru&text={text}'
    else:
        request = f'https://ftapi.pythonanywhere.com/translate?sl=ru&dl=en&text={text}'
    try:
        response = requests.get(request)
    except Exception:
        await update.message.reply_text('–£–ø—Å.. –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞‚ÄºÔ∏è',
                                        reply_markup=make_reply_markup(8, phase=context.user_data['phase']))
        return CHOICE
    if not response:
        await update.message.reply_text('–£–ø—Å.. –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞‚ÄºÔ∏è',
                                        reply_markup=make_reply_markup(8, phase=context.user_data['phase']))
        return CHOICE
    await update.message.reply_text(f'–ü–µ—Ä–µ–≤–æ–¥:\n\n{response.json()["destination-text"]}',
                                    reply_markup=make_reply_markup(8, phase=context.user_data['phase']))
    return CHOICE


async def leave_translater_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–í—ã—Ö–æ–¥ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞'''
    context.user_data.pop('phase', 0)
    await menu(update, context)
    return ConversationHandler.END


async def helping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''/help'''
    await update.message.reply_text('/menu - –º–µ–Ω—é –±–æ—Ç–∞')


def main():
    db_session.global_init('db/database.db')
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', helping))
    application.add_handler(CommandHandler('menu', menu))
    application.add_handler(MessageHandler(filters.Regex('^(–£—á–∏—Ç—å üéì)$'), learn_section))
    learn_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ üÜï)$'), learn_new_words)],
        states={CHOICE: [MessageHandler(filters.Regex('^(–Ø —É–∂–µ –∑–Ω–∞—é —ç—Ç–æ —Å–ª–æ–≤–æ)$'), already_known),
                         MessageHandler(filters.Regex('^(–ù–∞—á–∞—Ç—å —É—á–∏—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ)$'), start_learn_word)]},
        fallbacks=[MessageHandler(filters.Regex('^(–ó–∞–∫–æ–Ω—á–∏—Ç—å)$'), stop_learning)])
    application.add_handler(learn_conv)
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –≤—ã–ª–µ–∑—Ç–∏ –æ—à–∏–±–∫–∞, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —á—Ç–æ CallbackQueryHandler
    # –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å callback'–∏ –∏–∑–≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞, –Ω–∏–∫–∞–∫ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É
    repeat_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞ üîÅ)$'), repeat_words)],
        states={
            CHOICE: [
                MessageHandler(filters.Regex('^(–ù–∞–ø–∏—Å–∞—Ç—å ‚úè|–í—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üî¢|–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üëÄ)'), choice)],
            TYPING_REPLY: [
                MessageHandler(
                    filters.TEXT & ~(filters.COMMAND | filters.Regex("^(–ó–∞–∫–æ–Ω—á–∏—Ç—å)$")),
                    enter_translation_during_repeating)],
            REMEMBER: [
                MessageHandler(filters.Regex('^(–Ø –≤—Å–ø–æ–º–Ω–∏–ª —ç—Ç–æ —Å–ª–æ–≤–æ|–Ø –Ω–µ –≤—Å–ø–æ–º–Ω–∏–ª —ç—Ç–æ —Å–ª–æ–≤–æ)'), do_you_remember)],
            CALLBACK: [CallbackQueryHandler(repeat_quiz_callback_handler, '^(repeat_quiz)')]},
        fallbacks=[MessageHandler(filters.Regex('^(–ó–∞–∫–æ–Ω—á–∏—Ç—å)$'), stop_repeating)]
    )
    application.add_handler(repeat_conv)
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –≤—ã–ª–µ–∑—Ç–∏ –æ—à–∏–±–∫–∞, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —á—Ç–æ CallbackQueryHandler
    # –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å callback'–∏ –∏–∑–≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞, –Ω–∏–∫–∞–∫ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É
    categories_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üìÑ)$'), categories_section)],
        states={CALLBACK: [CallbackQueryHandler(open_category_callback_handler, '^(open_category)'),
                           CallbackQueryHandler(back_to_categories_section, '^(back_to_categories_section)$')]},
        fallbacks=[CallbackQueryHandler(back_to_dictionary_section, '^(back_to_dictionary_section)$')]
    )
    application.add_handler(categories_conv)
    add_word_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–ª–æ–≤–æ ‚ûï)$'), add_word_section)],
        states={
            CHOICE: [MessageHandler(filters.Regex('^(–°–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º|–ü–µ—Ä–µ–≤–æ–¥|–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É-–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é üñº)$'),
                                    regular_choice)],
            TYPING_REPLY: [
                MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^(–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ üíæ|–û—Ç–º–µ–Ω–∞ ‚ùå)$")),
                               receive_information)],
            RECEIVE_IMAGE: [MessageHandler(filters.PHOTO, receive_image)]},
        fallbacks=[MessageHandler(filters.Regex('^(–û—Ç–º–µ–Ω–∞ ‚ùå)$'), cancel),
                   MessageHandler(filters.Regex('^(–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ üíæ)$'), save_word)])
    application.add_handler(add_word_conv)
    translater_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ üí¨)$'), translater_section)],
        states={
            CHOICE: [MessageHandler(filters.Regex('^(–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üìù|–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üîÑ)'), translate_choice)],
            TYPING_REPLY: [MessageHandler(
                filters.TEXT & ~(filters.COMMAND | filters.Regex("^(–í–µ—Ä–Ω—É—Ç—å—Å—è üîô)$")),
                translate)]},
        fallbacks=[MessageHandler(filters.Regex("^(–í–µ—Ä–Ω—É—Ç—å—Å—è üîô)$"), leave_translater_section)]
    )
    application.add_handler(translater_conv)
    application.add_handler(MessageHandler(filters.Regex('^(–°–ª–æ–≤–∞—Ä—å üìö)$'), dictionary_section))
    application.add_handler(MessageHandler(filters.Regex('^(–í–µ—Ä–Ω—É—Ç—å—Å—è üîô)$'), menu))
    application.add_handler(MessageHandler(filters.Regex('^(–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üìù)'), change_categories))
    application.add_handler(CallbackQueryHandler(cc_callback_handler, '^(change_categories)'))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
